name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

env:
  PYTHON_VERSION: '3.9'
  
jobs:
  # Code Quality Checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run pre-commit hooks
      run: |
        pre-commit install
        pre-commit run --all-files
        
    - name: Security scan with Bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: bandit-report.json

  # Unit Tests
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        exclude:
          # Reduce matrix size for faster CI
          - os: windows-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.8'
            
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create test directories
      run: |
        mkdir -p tests/data/raw tests/data/processed tests/models tests/outputs
        
    - name: Run unit tests
      run: |
        pytest tests/ -v --tb=short -m "not slow and not integration" \
          --cov=src --cov-report=xml --cov-report=term-missing \
          --junit-xml=junit-${{ matrix.os }}-${{ matrix.python-version }}.xml
          
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          junit-*.xml
          coverage.xml

  # Integration Tests (Linux only for speed)
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create test environment
      run: |
        mkdir -p tests/data/{raw,processed,yolo} tests/{models,outputs}
        # Create minimal test data
        echo '{}' > tests/data/damage_annotations.json
        
    - name: Run integration tests
      run: |
        pytest tests/ -v --tb=short -m "integration" \
          --cov=src --cov-report=xml \
          --junit-xml=junit-integration.xml
          
    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: |
          junit-integration.xml
          coverage.xml

  # API Tests
  api-tests:
    name: API Tests
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run API tests
      run: |
        pytest tests/test_infer_api.py -v --tb=short \
          --cov=src.infer --cov-report=xml \
          --junit-xml=junit-api.xml
          
    - name: Upload API test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: api-test-results
        path: |
          junit-api.xml
          coverage.xml

  # Performance Tests (Optional - only on main branch)
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [test, integration]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark
        
    - name: Run performance tests
      run: |
        pytest tests/ -v --tb=short -m "slow" \
          --benchmark-only --benchmark-json=benchmark.json
          
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-results
        path: benchmark.json

  # Coverage Report
  coverage:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [test, integration, api-tests]
    steps:
    - uses: actions/checkout@v4
    
    - name: Download test artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts/
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install coverage[toml] codecov
        
    - name: Combine coverage reports
      run: |
        coverage combine artifacts/*/coverage.xml || true
        coverage report --show-missing
        coverage html
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Upload coverage HTML
      uses: actions/upload-artifact@v3
      with:
        name: coverage-html
        path: htmlcov/

  # Documentation Build
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx-rtd-theme myst-parser
        
    - name: Build documentation
      run: |
        # Create basic Sphinx docs if they don't exist
        mkdir -p docs
        echo "# Collision Parts Prediction Documentation" > docs/index.md
        echo "Auto-generated documentation for the collision parts prediction system." >> docs/index.md
        
    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: docs/

  # Configuration Validation
  config-validation:
    name: Validate Configurations
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml jsonschema
        
    - name: Validate YAML configurations
      run: |
        python -c "
        import yaml
        import glob
        for yaml_file in glob.glob('**/*.yaml', recursive=True) + glob.glob('**/*.yml', recursive=True):
            try:
                with open(yaml_file, 'r') as f:
                    yaml.safe_load(f)
                print(f'✓ {yaml_file}')
            except Exception as e:
                print(f'✗ {yaml_file}: {e}')
                exit(1)
        "
        
    - name: Validate DVC pipeline
      run: |
        python -c "
        import yaml
        import os
        if os.path.exists('dvc.yaml'):
            with open('dvc.yaml', 'r') as f:
                dvc_config = yaml.safe_load(f)
            print('✓ DVC pipeline configuration is valid')
            print(f'Found {len(dvc_config.get(\"stages\", {}))} pipeline stages')
        else:
            print('No DVC pipeline found')
        "

  # Deployment Preparation (for main branch)
  deploy-prep:
    name: Deployment Preparation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [quality, test, integration, api-tests, coverage]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Build distribution packages
      run: |
        pip install build
        python -m build
        
    - name: Test package installation
      run: |
        pip install dist/*.whl
        python -c "import src; print('Package installed successfully')"
        
    - name: Upload distribution packages
      uses: actions/upload-artifact@v3
      with:
        name: distribution-packages
        path: dist/

  # Summary Job
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [quality, test, integration, api-tests, coverage, docs, config-validation]
    steps:
    - name: Check job statuses
      run: |
        echo "## CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.quality.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration | ${{ needs.integration.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| API Tests | ${{ needs.api-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Coverage | ${{ needs.coverage.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Documentation | ${{ needs.docs.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Config Validation | ${{ needs.config-validation.result }} |" >> $GITHUB_STEP_SUMMARY
        
        # Check if any critical jobs failed
        if [[ "${{ needs.quality.result }}" == "failure" || "${{ needs.test.result }}" == "failure" ]]; then
          echo "❌ Critical jobs failed. Please review the failures above."
          exit 1
        else
          echo "✅ All critical jobs passed successfully!"
        fi